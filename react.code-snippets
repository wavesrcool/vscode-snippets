{
  "React - Use State - String": {
    "prefix": "r-us-s",
    "body": ["  const [s1, setS1] = React.useState<string>('')", ""],
    "description": ""
  },

  "React - Use State - Boolean": {
    "prefix": "r-us-b",
    "body": ["  const [b1, setB1] = React.useState<boolean>(false)", ""],
    "description": ""
  },

  "React - Use Effect": {
    "prefix": "r-uef",
    "body": [
      "React.useEffect(() => {",
      "//",
      "// @notes:",
      "",
      "// end",
      "return",
      "}, [])"
    ]
  },

  "React - Use Callback": {
    "prefix": "r-lc",
    "body": [
      "const lc${TM_FILENAME_BASE}${1} = React.useCallback(() => {",
      "//",
      "// @notes:",
      "",
      "// end",
      "return",
      "}, [])"
    ]
  },

  "React - Use Callback Async": {
    "prefix": "r-lca",
    "body": [
      "const lc${TM_FILENAME_BASE}${1} = React.useCallback(() => {",
      "//",
      "// @notes:",
      "",
      "// error false",
      "// fold()",
      "",
      "// loading start",
      "// fold()",
      "",
      ";(async () => {try {",
      "//",
      "// run",
      "",
      "console.log(`start async`)",
      "console.log(`end async`)",
      "} catch (e) {",
      "//",
      "// catch: ",
      "} finally {",
      "//",
      "// @radroots-lca-final: ",
      "",
      "// loading stop",
      "// fold()",
      "",
      "// end",
      "}})()",
      "",
      "// end",
      "return",
      "}, [])"
    ]
  },

  "React Memo": {
    "prefix": "r-lm",
    "body": [
      "  const lm${TM_FILENAME_BASE}${1}= React.useMemo(",
      "      () => ({",
      "        /**",
      "         * @notes:",
      "         */",
      "        ${2}: () => {",
      "        ${3}",
      "        // end",
      "        return",
      "        },",
      "      }),",
      "      []",
      "    )"
    ],
    "description": ""
  }
}
